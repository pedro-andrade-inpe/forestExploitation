import("gis")

local ADI = {  -- annual diametric increment
    -- CLASS    1     2     3     4     5     6     7     8     9
    braz     = {.291, .317, .442, .473, .623, .587, .587, .717, .836}, -- 2017
    borges   = {.287, .325, .437, .452, .470, .478, .531, .417, .000},
    canneti  = {.283, .377, .451, .475, .485, .493, .569, .580, .546},
    oliveira = {.427, .606, .720, .805, .710, .751, .903, .816, .838},
    mean     = {.290, .413, .451, .551, .617, .598, .658, .684, .712},
}

ForestExploitation = Model{
    cut_cycle = 30, -- years
    ypl = 10, -- years
    mcd = 6, -- minimum cut diameter (class number)
    damage_exp = 0.13, -- 13%
    cut_vol = 3.334, -- m3
    reman_vol = 0.9822, -- m3
    seeds_vol = 1.7466, -- m3
    max_vol = 30, -- m3/ha
    reman_vol = 30, -- m3/ha
    old_mortality = 0.009, -- % year-1 according to Aleixo et al (2018)
    shapefile = Mandatory("File"),
    finalTime = 90,
    adi = Choice{
        medium    = ADI.mean,
        braz      = ADI.braz,
        borges    = ADI.borges,
        canneti   = ADI.canneti,
        oliveira  = ADI.oliveira,
        default = "medium"
    },
    bir_dth = Choice{
        colpini     = {birth = 0.3,  death = 0.78}, -- -0.48
        andrade_t1  = {birth = 2.51, death = 1.7},  -- +0.81
        higuchi     = {birth = 0.7,  death = 0.7},  --  0.00
        rocha       = {birth = 0.9,  death = 0},    -- +0.04
        souza       = {birth = 1.9,  death = 1.13}, -- +0.77
        oliveira_t0 = {birth = 1,    death = 1.2},  -- +0.20
        oliveira_t1 = {birth = 2,    death = 2},    --  0.00 PMFS
        oliveira_t3 = {birth = 3.5,  death = 2.5},  -- +1.00 PMFS
        gouveia_t1  = {birth = 3.3,  death = 2.6},  -- +0.70 PMFS
        gouveia_t2  = {birth = 3.78, death = 2.94}, -- +0.84 PMFS
        gouveia     = {birth = 3.54, death = 2.77}, -- +0.77 SELECTED
        oliveira_16 = {birth = 4.57, death = 3.62}, -- +0.95 PMFS
        default = "gouveia"
    },
    max_exp = function(self)
        return self.max_vol / self.cut_vol
    end,
    adi_rate = function(model, class)
        return model.adi[class]
    end,
    bir_rate = function(model)
        return model.bir_dth.birth
    end,
    dth_rate = function(model, age) -- "young" or "old"
        if age == "young" then
            return model.bir_dth.death
        else -- "old"
            return model.old_mortality
        end
    end,
    save_state = function(model, time)
        model.cs:save("time_"..time)
    end,
    init = function(model)
        model.cell = Cell{
            -- total amount of trees belonging to classes 1 to 9
            total_trees = function(cell)
                return math.floor(
                       cell.CLASS1_SUM + cell.CLASS2_SUM + cell.CLASS3_SUM +
                       cell.CLASS4_SUM + cell.CLASS5_SUM + cell.CLASS6_SUM +
                       cell.CLASS7_SUM + cell.CLASS8_SUM + cell.CLASS9_SUM)
            end,
            -- return the amount of trees from class mct to class 9
            sum_mcd_9 = function(cell)
                local sum = 0

                for i = model.mcd, 9 do
                   sum = sum + cell:get_trees(i)
                end

                return sum
            end,
            -- compute the number of trees that will be cut
            cut_trees = function(cell)
                return cell:sum_mcd_9() * 0.8048
            end,
            -- compute the number of seed trees
            seeds = function(cell)
                return cell:sum_mcd_9() * 0.1517
            end,
            -- return the number of trees in a given class
            get_trees = function(cell, class)
                return cell["CLASS"..class.."_SUM"]
            end,
            -- update the number of trees in a given class
            set_trees = function(cell, class, amount)
                cell["CLASS"..class.."_SUM"] = amount
            end,
            -- executes trees growth
            growth = function(cell)
                for i = 8, 1, -1 do -- go from the greater class to avoid growing two times
                    local initial_quantity = cell:get_trees(i)
                    local quantity = initial_quantity * 0.1 * model:adi_rate(i) * model.ypl

                    cell:set_trees(i, initial_quantity - quantity)
                    cell:set_trees(i + 1, cell:get_trees(i + 1) + quantity)
                end
            end,
            -- creates new trees in the class 1 by birth
            birth = function(cell)
                local quantity = cell:sum_mcd_9() * (1 + model:bir_rate()) ^ model.ypl
                cell:set_trees(1, cell:get_trees(1) + quantity)
            end,
            -- exploit the cell, cutting trees from class 9 to 1
            exploitation = function(cell)
                local total_trees_cut = cell:cut_trees()

                for i = 9, 1, -1 do
                    -- TODO: rever esta estrategia aqui tambem, ele sai explorando
                    -- tudo da classe e voltando
                    local trees = cell:get_trees(i)

                    if trees >= total_trees_cut then
                        cell:set_trees(i, trees - total_trees_cut)
                        return
                    else
                        cell:set_trees(i, 0)
                        total_trees_cut = total_trees_cut - trees
                    end
                end

                cell:collateral_damage()
            end,
            -- collateral damage by exploitation
            collateral_damage = function(cell)
                for i = 1, 9 do
                    -- TODO: talvez esta estrategia nao seja boa, ver com o time
                    cell:set_trees(i, cell:get_trees(i) * model.damage_exp)
                end
            end,
            -- remove trees by natural mortality
            natural_mortality = function(cell)
                cell:natural_mortality_young()
                cell:natural_mortality_old()
            end,
            -- natural mortality of young trees
            natural_mortality_young = function(cell)
                local quantity = cell:total_trees() * (1 + model:dth_rate("young")) ^ model.ypl

                for i = 1, 9 do
                    local trees = cell:get_trees(i)

                    if trees >= quantity then
                        cell:set_trees(i, trees - quantity)
                        return
                    else
                        cell:set_trees(i, 0)
                        quantity = quantity - trees
                    end
                end
            end,
            -- natural mortality of old trees
            natural_mortality_old = function(cell)
                local quantity = cell:total_trees() * (1 + model:dth_rate("old")) ^ model.ypl

                for i = 9, 1, -1 do
                    local trees = cell:get_trees(i)

                    if trees >= quantity then
                        cell:set_trees(i, trees - quantity)
                        return
                    else
                        cell:set_trees(i, 0)
                        quantity = quantity - trees
                    end
                end
            end,
        }

        local outputDir = Directory(os.date("%y-%m-%d-simulation-%Hh%M"))

        outputDir:create()
        model.shapefile:copy(outputDir)
        sessionInfo().currentFile:copy(outputDir)

        model.project = Project{
            file = outputDir.."/results.qgs",
            clean = true
        }

        model.layer = Layer{
            project = model.project,
            file = outputDir.."/"..model.shapefile:name(),
            name = "input"
        }

        model.cs = CellularSpace{
            layer = model.layer,
            instance = model.cell
        }

        model.timer = Timer{
            Event{start = 0, priority = "high", period = model.cut_cycle, action = function(ev)
                print("Exploiting/saving "..ev:getTime())
                model.cs:exploitation()
                model:save_state(ev:getTime())
            end},
            Event{start = 0, priority = "low", period = model.ypl, action = function(ev)
                print("Birth/growth/mortality "..ev:getTime())
                model.cs:birth()
                model.cs:growth()
                model.cs:natural_mortality()
            end},
        }
    end
}
